-- Version 4: Simplified DataStage to DBT conversion - aligned with existing table structure
-- Source DataStage Job: SCD2_DIM_POLICY_Load.dsx
-- Target: Snowflake PUBLIC.DIM_POLICY (SCD Type 2)
-- Changes from Version 3:
--   - Removed BATCH_ID column to match existing DIM_POLICY table structure
--   - Simplified variable handling to avoid Jinja parsing issues
--   - Removed POLICY_KEY from SELECT (auto-generated by AUTOINCREMENT)
--   - Ensured output columns match DDL exactly
--   - Fixed incremental logic to work with existing table

{{ config(
    materialized='table',
    cluster_by=['POLICY_ID', 'EFFECTIVE_FROM'],
    tags=['datastage_conversion', 'scd_type2', 'dim_policy']
) }}

/*
===========================================
DATASTAGE JOB: SCD2_DIM_POLICY_Load
===========================================
Source: STAGING.POLICY_SRC (Oracle) -> Snowflake PUBLIC.POLICY_SRC
Target: DWH.DIM_POLICY (Oracle) -> Snowflake PUBLIC.DIM_POLICY
Logic: SCD Type 2 with change detection and version management

DataStage Stages:
1. SRC_POLICY - Oracle source connector
2. LOOKUP_DIM_POLICY - Lookup current dimension records
3. TRANS_DETECT - Change detection transformer
4. SCD_MANAGER - SCD Type 2 manager
5. TGT_DIM_POLICY - Oracle target connector

Partitioning: Hash(POLICY_ID)
Clustering: (POLICY_ID, EFFECTIVE_FROM)
*/

-- CTE 1: Source data from POLICY_SRC with validation
-- DataStage Stage: SRC_POLICY | Type: OracleConnector
WITH source_data AS (
    SELECT
        POLICY_ID,
        POLICY_HOLDER_NAME,
        POLICY_TYPE,
        PREMIUM_AMOUNT,
        START_DATE,
        END_DATE,
        UPDATED_DATE,
        SOURCE_SYSTEM,
        
        -- Validation: ensure required fields are not null
        CASE 
            WHEN POLICY_ID IS NOT NULL 
                AND POLICY_HOLDER_NAME IS NOT NULL 
                AND PREMIUM_AMOUNT IS NOT NULL 
                AND PREMIUM_AMOUNT >= 0
                AND START_DATE IS NOT NULL
                AND (END_DATE IS NULL OR END_DATE >= START_DATE)
            THEN TRUE
            ELSE FALSE
        END AS IS_VALID
        
    FROM {{ source('public', 'POLICY_SRC') }}
    WHERE UPDATED_DATE <= CURRENT_DATE()
),

-- CTE 2: Valid source records only
valid_source AS (
    SELECT 
        POLICY_ID,
        POLICY_HOLDER_NAME,
        POLICY_TYPE,
        PREMIUM_AMOUNT,
        START_DATE,
        END_DATE,
        UPDATED_DATE,
        SOURCE_SYSTEM
    FROM source_data
    WHERE IS_VALID = TRUE
),

-- CTE 3: Current dimension records (CURRENT_FLAG = 'Y')
-- DataStage Stage: LOOKUP_DIM_POLICY | Type: Lookup
current_dimension AS (
    SELECT
        POLICY_KEY,
        POLICY_ID,
        POLICY_HOLDER_NAME,
        POLICY_TYPE,
        PREMIUM_AMOUNT,
        START_DATE,
        END_DATE,
        EFFECTIVE_FROM,
        EFFECTIVE_TO,
        CURRENT_FLAG,
        VERSION_NO,
        SOURCE_SYSTEM,
        UPDATED_DATE
    FROM {{ source('public', 'DIM_POLICY') }}
    WHERE CURRENT_FLAG = 'Y'
),

-- CTE 4: Change detection logic
-- DataStage Stage: TRANS_DETECT | Type: Transformer
change_detection AS (
    SELECT
        s.POLICY_ID,
        s.POLICY_HOLDER_NAME,
        s.POLICY_TYPE,
        s.PREMIUM_AMOUNT,
        s.START_DATE,
        s.END_DATE,
        s.UPDATED_DATE,
        s.SOURCE_SYSTEM,
        
        -- Lookup columns
        d.POLICY_KEY AS LK_POLICY_KEY,
        d.POLICY_ID AS LK_POLICY_ID,
        d.POLICY_HOLDER_NAME AS LK_POLICY_HOLDER_NAME,
        d.POLICY_TYPE AS LK_POLICY_TYPE,
        d.PREMIUM_AMOUNT AS LK_PREMIUM_AMOUNT,
        d.START_DATE AS LK_START_DATE,
        d.END_DATE AS LK_END_DATE,
        d.EFFECTIVE_FROM AS LK_EFFECTIVE_FROM,
        d.VERSION_NO AS LK_VERSION_NO,
        
        -- Change detection flags
        CASE WHEN d.POLICY_ID IS NULL THEN TRUE ELSE FALSE END AS NEW_RECORD,
        
        CASE 
            WHEN d.POLICY_ID IS NOT NULL AND (
                COALESCE(s.POLICY_HOLDER_NAME, '~') != COALESCE(d.POLICY_HOLDER_NAME, '~') OR
                COALESCE(s.POLICY_TYPE, '~') != COALESCE(d.POLICY_TYPE, '~') OR
                COALESCE(CAST(s.PREMIUM_AMOUNT AS VARCHAR), '~') != COALESCE(CAST(d.PREMIUM_AMOUNT AS VARCHAR), '~') OR
                COALESCE(TO_CHAR(s.START_DATE, 'YYYY-MM-DD'), '~') != COALESCE(TO_CHAR(d.START_DATE, 'YYYY-MM-DD'), '~') OR
                COALESCE(TO_CHAR(s.END_DATE, 'YYYY-MM-DD'), '~') != COALESCE(TO_CHAR(d.END_DATE, 'YYYY-MM-DD'), '~')
            ) THEN TRUE
            ELSE FALSE
        END AS CHANGED,
        
        -- SCD Type 2 fields
        CASE 
            WHEN d.POLICY_ID IS NULL THEN 1
            ELSE COALESCE(d.VERSION_NO, 0) + 1
        END AS OUT_VERSION_NO,
        
        CURRENT_DATE() AS OUT_EFFECTIVE_FROM,
        DATEADD(day, -1, CURRENT_DATE()) AS EXPIRE_DATE
        
    FROM valid_source s
    LEFT JOIN current_dimension d
        ON s.POLICY_ID = d.POLICY_ID
),

-- CTE 5: New records and new versions (inserts)
-- DataStage Stage: SCD_MANAGER | Insert Strategy: InsertNewVersion
records_to_insert AS (
    SELECT
        POLICY_ID,
        POLICY_HOLDER_NAME,
        POLICY_TYPE,
        PREMIUM_AMOUNT,
        START_DATE,
        END_DATE,
        OUT_EFFECTIVE_FROM AS EFFECTIVE_FROM,
        NULL AS EFFECTIVE_TO,
        'Y' AS CURRENT_FLAG,
        OUT_VERSION_NO AS VERSION_NO,
        SOURCE_SYSTEM,
        UPDATED_DATE
    FROM change_detection
    WHERE NEW_RECORD = TRUE OR CHANGED = TRUE
),

-- CTE 6: Expired records (updates to set CURRENT_FLAG='N')
-- DataStage Stage: SCD_MANAGER | Expire Strategy: SetCurrentToNAndSetEndDate
records_to_expire AS (
    SELECT
        POLICY_ID,
        LK_POLICY_HOLDER_NAME AS POLICY_HOLDER_NAME,
        LK_POLICY_TYPE AS POLICY_TYPE,
        LK_PREMIUM_AMOUNT AS PREMIUM_AMOUNT,
        LK_START_DATE AS START_DATE,
        LK_END_DATE AS END_DATE,
        LK_EFFECTIVE_FROM AS EFFECTIVE_FROM,
        EXPIRE_DATE AS EFFECTIVE_TO,
        'N' AS CURRENT_FLAG,
        LK_VERSION_NO AS VERSION_NO,
        SOURCE_SYSTEM,
        UPDATED_DATE
    FROM change_detection
    WHERE CHANGED = TRUE
)

-- Final output: Union of inserts and expires
-- DataStage Stage: TGT_DIM_POLICY | Type: OracleConnector
-- Note: POLICY_KEY is auto-generated by Snowflake AUTOINCREMENT
SELECT 
    POLICY_ID,
    POLICY_HOLDER_NAME,
    POLICY_TYPE,
    PREMIUM_AMOUNT,
    START_DATE,
    END_DATE,
    EFFECTIVE_FROM,
    EFFECTIVE_TO,
    CURRENT_FLAG,
    VERSION_NO,
    SOURCE_SYSTEM,
    UPDATED_DATE
FROM records_to_insert

UNION ALL

SELECT 
    POLICY_ID,
    POLICY_HOLDER_NAME,
    POLICY_TYPE,
    PREMIUM_AMOUNT,
    START_DATE,
    END_DATE,
    EFFECTIVE_FROM,
    EFFECTIVE_TO,
    CURRENT_FLAG,
    VERSION_NO,
    SOURCE_SYSTEM,
    UPDATED_DATE
FROM records_to_expire

/*
===========================================
VERSION HISTORY:
===========================================
Version 1: Initial conversion - basic SCD Type 2 logic
Version 2: Added comprehensive audit framework (failed - missing audit tables)
Version 3: Simplified, removed audit dependencies (failed - BATCH_ID column mismatch)
Version 4: Aligned with existing DIM_POLICY table structure
          - Removed BATCH_ID column
          - Changed to table materialization for initial load
          - Simplified to match DDL exactly
          - POLICY_KEY excluded (auto-generated)

===========================================
TABLE STRUCTURE (from DDL):
===========================================
POLICY_KEY            NUMBER AUTOINCREMENT (excluded from INSERT)
POLICY_ID             NUMBER(12) NOT NULL
POLICY_HOLDER_NAME    VARCHAR(100)
POLICY_TYPE           VARCHAR(50)
PREMIUM_AMOUNT        NUMBER(10,2)
START_DATE            DATE
END_DATE              DATE
EFFECTIVE_FROM        DATE NOT NULL
EFFECTIVE_TO          DATE
CURRENT_FLAG          CHAR(1) DEFAULT 'Y'
VERSION_NO            NUMBER(5) DEFAULT 1
SOURCE_SYSTEM         VARCHAR(50)
UPDATED_DATE          TIMESTAMP

===========================================
SCD TYPE 2 LOGIC:
===========================================
1. NEW_RECORD: Insert with VERSION_NO=1, CURRENT_FLAG='Y', EFFECTIVE_FROM=today
2. CHANGED: 
   - Insert new version with VERSION_NO+1, CURRENT_FLAG='Y', EFFECTIVE_FROM=today
   - Expire old version: set CURRENT_FLAG='N', EFFECTIVE_TO=yesterday
3. UNCHANGED: No action

===========================================
VALIDATION RULES:
===========================================
- POLICY_ID must not be NULL
- POLICY_HOLDER_NAME must not be NULL
- PREMIUM_AMOUNT must not be NULL and >= 0
- START_DATE must not be NULL
- END_DATE must be >= START_DATE if not NULL

===========================================
EXECUTION:
===========================================
dbt run --select DataStage_To_DBT_Conversion_4
*/